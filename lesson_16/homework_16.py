"""1. Создайте генератор, который возвращает только строки из списка:
["Python", 123, "Java", 456, "C++", 789]
Выведите все строки в одну строку через пробел.
Ожидаемый вывод:
Python Java C++"""
# a = ["Python", 123, "Java", 456, "C++", 789]
# strings = filter(lambda x: isinstance(x, str), a)
# result = " ".join(strings)
# print(result)


"""2. Создайте генератор случайных чисел от 1 до 100 (10 чисел),
используя модуль random (попробуйте сами найти как использовать), и найдите максимальное число.
Ожидаемый вывод:
Максимальное число: 98  # (значение может отличаться)"""
# import random
#
# # Генерируем список из 10 случайных чисел
# numbers = [random.randint(1, 100) for _ in range(10)]
# print("Сгенерированные числа:", numbers)
#
# # Находим максимальное число
# max_number = max(numbers)
# print(f"Максимальное число: {max_number}")


"""3. Создайте генератор, который возвращает слова из файла words.txt,
но только те, которые длиннее 5 символов.
Пример содержимого файла (words.txt):
apple banana cat elephant python
Ожидаемый вывод:
banana elephant python"""
# with open('words.txt', 'r') as file:
#     content = file.read()
#     words = content.split()
#     filtered_words = filter(lambda word: len(word) > 5, words)
#     result = " ".join(filtered_words)
#     print(result)


"""4. Напишите функцию-генератор, которая перебирает строки файла text.txt,
возвращая только те, которые содержат слово "Python".
Пример содержимого text.txt:
Hello world
Python is great
I love coding in Python
Java is also good
Ожидаемый вывод:
Python is great
I love coding in Python"""

# def find_python_lines():
#     with open('text.txt', 'r', encoding='utf-8') as file:
#         for line in file:
#             # Разбиваем строку на слова и проверяем наличие "Python"
#             if 'Python' in line.split():
#                 yield line.rstrip()
#
# for python_line in find_python_lines():
#     print(python_line)


"""5. Создайте бесконечный генератор, который возвращает случайные числа от 1 до 100.
Остановите выполнение, как только сгенерируется число 50.
Ожидаемый вывод (значения могут отличаться):
23 89 17 50"""

# import random
#
# def infinite_random_generator():
#     while True:
#         number = random.randint(1, 100)
#         yield number
#
# # Использование генератора
# generator = infinite_random_generator()
#
# for number in generator:
#     print(number, end=' ')
#     if number == 50:
#         break

"""6. Создайте функцию-генератор, которая возвращает первые N простых чисел.
Выведите первые 10 простых чисел.
Ожидаемый вывод:
2 3 5 7 11 13 17 19 23 29"""

# def is_prime(n):
#     """Проверяет, является ли число простым"""
#     if n < 2:
#         return False
#     for i in range(2, int(n**0.5) + 1):
#         if n % i == 0:
#             return False
#     return True
#
# def prime_generator(n):
#     """Генератор первых N простых чисел"""
#     count = 0
#     num = 2
#     while count < n:
#         if is_prime(num):
#             yield num
#             count += 1
#         num += 1
#
# # Получаем первые 10 простых чисел
# primes = prime_generator(10)
#
# # Выводим результат
# for prime in primes:
#     print(prime, end=' ')

"""7. Создайте функцию-генератор, которая имитирует загрузку данных из API.
Генератор должен возвращать строки "Получены данные 1", "Получены данные 2", …
Остановите генерацию после 5 вызовов next().
Ожидаемый вывод:
Получены данные 1
Получены данные 2
Получены данные 3
Получены данные 4
Получены данные 5"""

# def api_data_generator():
#     """Генератор, имитирующий загрузку данных из API"""
#     count = 1
#     while count <= 5:
#         yield f"Получены данные {count}"
#         count += 1
#
# # Создаем генератор
# generator = api_data_generator()
#
# # Вызываем next() 5 раз
# print(next(generator))
# print(next(generator))
# print(next(generator))
# print(next(generator))
# print(next(generator))

"""8. Используйте map() вместе с лямбда-функцией, чтобы для каждого числа из пользовательского ввода
(числа, разделённые пробелами) вычислить его квадрат.
Результатом должно быть преобразование входной строки в список квадратов."""

# # Получаем ввод от пользователя
# user_input = input("Введите числа через пробел: ")
#
# # Разбиваем строку на список чисел, преобразуем в int и вычисляем квадраты
# squares = list(map(lambda x: int(x)**2, user_input.split()))
#
# # Выводим результат
# print("Квадраты чисел:", squares)

"""9. Напишите программу, которая с помощью map() и метода строк upper преобразует список названий городов
 к верхнему регистру.
Например, преобразуйте список ["Москва", "Санкт-Петербург", "Казань"] в
 ["МОСКВА", "САНКТ-ПЕТЕРБУРГ", "КАЗАНЬ"]."""
# cities = ["Москва", "Санкт-Петербург", "Казань"]
# result = map(lambda x: x.upper(), cities)
# print(list(result))

"""10. Используя filter(), оставьте в списке только те числа, которые делятся на 3 и на 5 одновременно.
Дан список: [15, 30, 45, 22, 60, 77, 90, 100]."""
# nums = [15, 30, 45, 22, 60, 77, 90, 100]
# result = filter(lambda x: x % 3 == 0 and x % 5 ==0, nums)
# print(list(result))

"""11. Используя filter(), получите из списка только строки, содержащие хотя бы одну цифру.
Дан список: ["hello", "world42", "python3", "abc", "123", "data1science"]."""
# # Исходный список
# words = ["hello", "world42", "python3", "abc", "123", "data1science"]
#
# # Используем filter() с лямбда-функцией для поиска строк с цифрами
# result = list(filter(lambda x: any(char.isdigit() for char in x), words))
#
# # Выводим результат
# print(result)

"""12. Используйте zip() и dict(), чтобы создать словарь, в котором:
Ключи – это названия стран
Значения – их столицы
Исходные списки:
countries = ["Россия", "Франция", "Германия"]
capitals = ["Москва", "Париж", "Берлин"]
Результат должен быть таким:
{"Россия": "Москва", "Франция": "Париж", "Германия": "Берлин"}
Подсказка: zip объект можно сразу преобразовать в словарь, если в zip преобразовали 2 итерируемых объекта."""
# countries = ["Россия", "Франция", "Германия"]
# capitals = ["Москва", "Париж", "Берлин"]
# d = dict(zip(countries, capitals))
# print(d)

"""13. Используйте zip(*iterable), чтобы выполнить обратное преобразование списка кортежей:
data = [(1, 'a'), (2, 'b'), (3, 'c')]
Распакуйте его в два отдельных списка:
[1, 2, 3]
['a', 'b', 'c']"""
# data = [(1, 'a'), (2, 'b'), (3, 'c')]
# a, b = zip(*data)
# print(list(a))
# print(list(b))


"""14. Дан список имен names. Отсортируйте его так, чтобы сначала шли имена с заглавной буквы, 
а затем – с маленькой.
names = ["петр", "Иван", "мария", "Анна"]
Ожидаемый результат:
["Анна", "Иван", "мария", "петр"]

Подсказка: вспомните как найти id буквы чтобы понять какая больше заглавная или строчная =)"""
# names = ["петр", "Иван", "мария", "Анна"]
#
# # Сортируем: сначала имена с заглавной буквы, затем со строчной
# sorted_names = sorted(names, key=lambda x: (not x[0].isupper(), x))
#
# print(sorted_names)


"""157&. Дан список кортежей products, где первый элемент – название товара, второй – цена.
 Отсортируйте его по цене (по возрастанию).

products = [("Телефон", 500), ("Ноутбук", 1000), ("Планшет", 700)]
Ожидаемый результат:

[("Телефон", 500), ("Планшет", 700), ("Ноутбук", 1000)]"""
# products = [("Телефон", 500), ("Ноутбук", 1000), ("Планшет", 700)]
#
# # Сортируем по цене (второй элемент кортежа)
# sorted_products = sorted(products, key=lambda x: x[1])
#
# print(sorted_products)